{
  "name": "Reon",
  "tagline": "Event library for React",
  "body": "# Reon\r\n[![CircleCI](https://circleci.com/gh/ambassify/reon.svg?style=svg)](https://circleci.com/gh/ambassify/reon)\r\n\r\nEvent library for [React](https://facebook.github.io/react/)\r\n\r\nThis library acts as a helper dealing with [React's event system](https://facebook.github.io/react/docs/events.html) and ensures a flexible interface between components.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install --save reon\r\n```\r\n\r\n## Goals\r\n\r\n- Remove some boilerplate from code handling events in React.\r\n- Make the interface of an event more flexible by passing an object in as the only argument.\r\n\r\nInstead of writing\r\n```js\r\nif (this.props.onUploadReady)\r\n    this.props.onUploadReady(file);\r\n```\r\n\r\nyou now write\r\n```js\r\nReon.trigger(this.props.onUploadReady, this, {\r\n    file: file\r\n});\r\n```\r\n\r\n## Usage\r\n\r\n```\r\n// Trigger new events\r\nReon.trigger(eventHandler, sourceComponent, [objectContainingData]);\r\n\r\n// Forward an event previously received from Reon / React\r\nReon.forward(eventHandler, sourceComponent, originalEvent, [objectContainingData]);\r\n```\r\n\r\nThe `eventHandler` will receive an object as its first argument which contains all of the properties of `objectContainingData` and optionally the properties `reonEvent`, `reactEvent` and `nativeEvent` when using `Reon.forward`.\r\n\r\n- `reonEvent` is added when the forwarded event is an event generated by Reon.\r\n- `reactEvent` is added when the forwarded event is either a [React Synthetic Event](https://facebook.github.io/react/docs/events.html#syntheticevent) or a event generated by Reon. It will point to the original React event that was forwarded.\r\n- `nativeEvent` is added whenever `Reon.forward` is used, it will point to the original event that the browser itself generated.\r\n\r\n## Examples\r\n\r\n### Trigger new events\r\n\r\n```js\r\nimport Reon from 'reon';\r\n\r\nconst Button = (props) => (\r\n    <button onClick={e => {\r\n            Reon.trigger(props.onClick, this, { value: props.label });\r\n        }}>\r\n        {props.label}\r\n    </button>\r\n);\r\n\r\nconst App = (props) => (\r\n    <Button label=\"foo\" onClick={e => {\r\n        console.log(e.value);\r\n    }} />\r\n);\r\n```\r\n\r\n### Passing synthetic events to the next component.\r\n\r\n```js\r\nimport Reon from 'reon';\r\n\r\nconst Button = (props) => (\r\n    <button onClick={e => {\r\n            Reon.forward(props.onClick, this, e, { value: props.label });\r\n        }}>\r\n        {props.label}\r\n    </button>\r\n);\r\n\r\nconst App = (props) => (\r\n    <Button label=\"foo\" onClick={e => {\r\n        e.stopPropagation();\r\n        console.log(e.value);\r\n    }} />\r\n);\r\n```\r\n## Contributing\r\n\r\nIf you have some issue or code you would like to add, feel free to open a Pull Request or Issue and we will look into it as soon as we can.\r\n\r\n## License\r\n\r\nWe are releasing this under a MIT License.\r\n\r\n## About us\r\n\r\nIf you would like to know more about us, be sure to have a look at [our website](https://www.ambassify.com), or our Twitter accounts [Ambassify](https://twitter.com/Ambassify), [Sitebase](https://twitter.com/Sitebase), [JorgenEvens](https://twitter.com/JorgenEvens)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}